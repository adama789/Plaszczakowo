@page "/carrier_assignment"
@using Problem.CarrierAssignment;
@using GraphDrawer;
@using CarrierAssignmentDrawer;
<h1>Przypasowanie tragarzy</h1>
<button type="button" class="btn btn-danger" @onclick="GoToStart">GoToStart</button>
<button type="button" class="btn btn-danger" @onclick="Prev">prev</button>
<button type="button" class="btn btn-danger" @onclick="Next">next</button>
<button type="button" class="btn btn-danger" @onclick="GoToEnd">GoToEnd</button>

@code {
        CarrierAssignmentDrawer drawer;
        private Canvas2DContext? _context;
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
                if (firstRender)
                {
                        List<int> carriers = new() { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
                        int FrontCarrier = 5;
                        int RearCarrier = 5;
                        List<Edge> relations = new() { new Edge(1, 9), new Edge(2, 9), new Edge(3, 9), new Edge(4, 8), new Edge(2, 6), new Edge(3, 7), new Edge(1, 8), new Edge(1, 9), new Edge(4, 10) };
                        CarrierAssignmentInputData inputData = new(carriers, FrontCarrier, RearCarrier, relations);


                        CarrierAssignmentResolver resolver = new();
                        GraphDrawer graphDrawer = new(_context, new List<GraphVertex>{}, new List<GraphEdge>{});
                        drawer = new CarrierAssignmentDrawer(resolver.Resolve(inputData), graphDrawer);
                        drawer.CreateGraphDataFromInputData(inputData);
                        GraphData graphData = new(drawer.graphVertex, drawer.graphEdge);
                        graphDrawer.ApplyNewGraphData(graphData);
                }

        }
        void Next()
        {
                drawer.Next();
        }
        void Prev()
        {
                drawer.Prev();
        }
        void GoToEnd()
        {
                drawer.GoToEnd();
        }
        void GoToStart()
        {
                drawer.GoToStart();
        }
}