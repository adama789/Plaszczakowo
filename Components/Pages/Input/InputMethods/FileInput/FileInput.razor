@page "/input/file/{ProblemName}"
@using ElectronNET.API
@using ElectronNET.API.Entities
@using ProjektZaliczeniowy_AiSD2.Components.States
@inject NavigationManager Navigator
@inject IProblemState ProblemState;

<h1>Wybierz plik</h1>
<div class="files">
    @foreach (var problemInputFile in GetAllProblemFiles())
    {
        <span @onclick="() => OnFileSelect(problemInputFile)">
            <FileComponent
                FilePath="@problemInputFile"/>
        </span>
    }
</div>

<button @onclick="GetFile">Wybierz plik</button>
<button @onclick="ReadFileAndGoToProblemPage" disabled="@(SelectedFile == null)">Wczytaj</button>

@if (SelectedFile is not null)
{
    <p>SelectedFile: @SelectedFile</p>
}

@code {
    [Parameter] public required string ProblemName { get; set; }

    private string? SelectedFile;

    protected override void OnInitialized()
    {
        if (!CheckIfDirectoryExists())
            Directory.CreateDirectory(GetProblemPath());
    }

    private bool CheckIfDirectoryExists() => Path.Exists(GetProblemPath());

    public string[] GetAllProblemFiles() => Directory.GetFiles(GetProblemPath())
        .Where(file => file.EndsWith(".json"))
        .ToArray();

    private string GetProblemPath() => Path.Join(
        Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),
        "Plaszczakowo",
        ProblemName);

    private void OnFileSelect(string selectedFile)
    {
        SelectedFile = selectedFile;
    }

    private async void GetFile()
    {
        var currentBrowserWindow = Electron.WindowManager.BrowserWindows.First();
        var dialogOptions = new OpenDialogOptions
        {
            Properties = [OpenDialogProperty.openFile],
            Filters = [new FileFilter { Name = "Pliki problemu", Extensions = ["json"] }]
        };

        var files = await Electron.Dialog.ShowOpenDialogAsync(currentBrowserWindow, dialogOptions);
        if (files is null || files.Length == 0)
            return;
        SelectedFile = files.Last();
    }

    private async Task ReadFileAndGoToProblemPage()
    {
        await ReadFile();
        GoToProblemPage();
    }
    
    private async Task ReadFile()
    {
        if (SelectedFile is null)
            throw new NullReferenceException("SelectedFile can't be null");
        
        var fileContent = await File.ReadAllTextAsync(SelectedFile);
        await ProblemState.SetProblemJsonInputData(fileContent);
    }

    private void GoToProblemPage()
    {
        Navigator.NavigateTo($"/{ProblemName}");
    }
 
}