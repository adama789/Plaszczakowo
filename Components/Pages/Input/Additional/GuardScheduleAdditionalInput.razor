@page "/input/additional/guard_schedule"

@using Problem.GuardSchedule
@using System.Text.Json
@using ProjektZaliczeniowy_AiSD2.Components.Pages.Input.Additional.Components
@inherits AdditionalInputBase<GuardScheduleInputData>
@inject NavigationManager Navigator

<div class="guard_schedule_additional_input">
    <WoodenTitle>Powołane płaszczaki</WoodenTitle>
    
    <div class="plaszczak_entry_wrapper">
        @if (ProblemInput is not null)
        {
            <div class="max_steps">
                <h3>Maksymalna ilość kroków</h3>
                <input type="number" min="0" @bind="ProblemInput.MaxPossibleSteps"/>
            </div>
        }
        <hr/>
        @foreach (var plaszczak in ProblemInput?.Plaszczaki ?? [])
        {
            <PlaszczakEntry 
                Plaszczak="plaszczak"
                OnRemove="RemovePlaszczak"
                />
        }
    </div>
    <div class="add_plaszczak">
        <OldButton @onclick="AddPlaszczak" Width="20">Powołaj płaszczaka</OldButton>
    </div>
    <div class="return_buttons">
        <OldButton @onclick="GenerateRandomPlaszczaki">Losuj</OldButton>
        <OldButton @onclick="GoToProblemPage">Wczytaj</OldButton>
    </div>
</div>

@code {
    private readonly Random _random = new();

    protected override void InitializeDefaultInputProperties()
    {
        if (ProblemInput is not null)
        {
            ProblemInput.Plaszczaki = [];
        }
    }

    void AddPlaszczak()
    {
        if (ProblemInput is null)
            return;

        ProblemInput.Plaszczaki.Add(new Plaszczak(0, 0, 0));
        FixIndexing();
    }

    void RemovePlaszczak(Plaszczak plaszczak)
    {
        ProblemInput?.Plaszczaki.Remove(plaszczak);
        
        StateHasChanged();

        FixIndexing();
    }

    void GenerateRandomPlaszczaki()
    {
        if (ProblemInput is null)
            return;

        ProblemInput.Plaszczaki = [];
        
        var randomPlaszczakAmount = _random.Next(1, 20);

        var randomMaxSteps = _random.Next(1, 6);
        ProblemInput.MaxPossibleSteps = randomMaxSteps;

        for (var i = 0; i < randomPlaszczakAmount; i++)
        {
            var randomPlaszczakEnergy = _random.Next(1, 50);
            ProblemInput.Plaszczaki.Add(new Plaszczak(randomPlaszczakEnergy, 0, 0));
        }

        FixIndexing();
    }

    void FixIndexing()
    {
        if (ProblemInput is null) return;

        var id = 0;
        foreach (var plaszczak in ProblemInput.Plaszczaki)
        {
            plaszczak.Index = id;
            id++;
        }
    }
    
    private void GoToProblemPage()
    {
        ProblemState!.SetProblemInputData(ProblemInput!);
        Navigator.NavigateTo($"/guard_schedule");
    }
}