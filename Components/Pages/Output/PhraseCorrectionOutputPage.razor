@page "/phrase_correction_output"
@using States
@using Problem.PhraseCorrection
@using Problem.HuffmanCoding;
@inherits ProblemOutputBase<PhraseCorrectionOutput>

@inject NavigationManager Navigator


<ReturnButton ButtonPosition="HangingButton.HangingButtonPosition.Left"/>
<div class="phrase-correction-output">
    <div class="paper">
        <h2>Poprawiona melodia</h2>
        <p>
            @if (_outputData != null)
            {
                @_outputData.FixedPhrase
            }
        </p>
    </div>
    <div class="next_button">
        <OldButton @onclick="GoToNextSubproblem">Przejd≈∫ Dalej</OldButton>
    </div>
</div>

@code {
    PhraseCorrectionOutput? _outputData;

    protected override async Task OnInitializedAsync()
    {
        if (ProblemState is null)
            return;
        
        _outputData = await ProblemState.GetProblemOutputData<PhraseCorrectionOutput>();
    }

    private async void GoToNextSubproblem()
    {
        if (_outputData == null) return;
        
        HuffmanCodingInputData data = new(_outputData.FixedPhrase);
        if (ProblemState is null)
            throw new NullReferenceException("ProblemState is null");
        
        await ProblemState.SetProblemInputData(data);

        Navigator.NavigateTo($"/huffman_coding");
    }
}
