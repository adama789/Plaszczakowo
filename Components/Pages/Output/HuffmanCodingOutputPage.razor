@page "/huffman_coding_output"

@using States
@using Problem.HuffmanCoding;
@inherits ProblemOutputBase<HuffmanCodingOutput>
@inject IProblemState ProblemState

<ReturnButton/>
@if (_outputData != null)
{
    <h2>Zakodowana melodia:</h2>
    <p>@_outputData.Result</p>
    <h2>Melodia przed zakodowaniem:</h2>
    <p>@_outputData.InputPhrase</p>
    <h2>Kody Huffmana:</h2>
    @foreach (var hufCode in codes)
    {
        <p>@hufCode</p>
    }
}

@code {
    HuffmanCodingOutput? _outputData;
    List<string> codes;


    protected override async Task OnInitializedAsync()
    {
        _outputData = await ProblemState.GetProblemOutputData<HuffmanCodingOutput>();
        codes = ExtractCodes();
    }

    private List<string> ExtractCodes()
    {
        List<string> list = [];
        if (_outputData == null) return list;
        
        foreach (var key in _outputData.HuffmanDictionary.Keys)
        {
            var code = "";
            if (key != ' ')
            {
                code += key + " -> " + _outputData.HuffmanDictionary[key];
            }
            else {
                code += "_ -> " + _outputData.HuffmanDictionary[key];
            }
            list.Add(code);
        }
        return list;
    }
}