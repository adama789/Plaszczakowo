@page "/convex_hull_output"
@using Problem.ConvexHull
@using States
@inherits ProblemOutputBase<ConvexHullOutput>

@inject NavigationManager Navigation

<h2>Indeksy otoczki wypukłej:</h2>
<table>
    <thead>
        <tr>
            <th>Indeks</th>
        </tr>
    </thead>
    <tbody>
        @if (_outputData is null || _outputData.HullIndexes is null)
            throw new NullReferenceException("_outputData can't be null");
        
        @foreach (var i in _outputData.HullIndexes)
        {
            <tr>
                <td>@i</td>
            </tr>
        }
        
    </tbody>
</table>
<button @onclick="NextProblem">Następny problem</button>

@code {
    ConvexHullOutput? _outputData;

    protected override async Task OnInitializedAsync()
    {
        if (ProblemState is null) 
            throw new NullReferenceException("ProblemState is null");

        _outputData = await ProblemState.GetProblemOutputData<ConvexHullOutput>();
    }
    private void NextProblem()
    {
        Navigation.NavigateTo("fence_transport");
    }
}