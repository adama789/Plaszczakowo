@page "/convex_hull_output"
@using Drawer.GraphDrawer
@using Problem.FenceTransport
@using ProjektZaliczeniowy_AiSD2.States
@inherits ProblemOutputBase<ConvexHullOutput>

@inject NavigationManager Navigation
@inject IFenceState FenceState

<div class="convex_hull">
    <div class="title">
        <WoodenTitle>Otoczka wypukła</WoodenTitle>
    </div>
    <GraphCanvas Data="_convexHull"/>

    <div class="next_button">
        <OldButton @onclick="NextProblem">Przejdź Dalej</OldButton>
    </div>
</div>

@code {
    private ConvexHullOutput? _outputData;

    private FenceTransportInputData? _inputData;

    private GraphData _convexHull { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ProblemState is not null)
        {
            _outputData = await ProblemState.GetProblemOutputData<ConvexHullOutput>();
            _inputData = await ProblemState.GetProblemInputData<FenceTransportInputData>();
            _inputData.ConvexHullOutput = _outputData;
            await ProblemState.SetProblemInputData(_inputData);
            SaveFenceToFenceState();
        }
    }

    protected override void OnParametersSet()
    {
        GetConvexHullGraphData();
    }

    private void GetConvexHullGraphData()
    {
        if (_outputData is not null && _inputData is not null) 
            _convexHull = _outputData.ToGraphData(_inputData, false);
    }
    
    private void SaveFenceToFenceState()
    {
        FenceState.SetFence(_inputData!, _outputData!);
    }
    
    private void NextProblem()
    {
        Navigation.NavigateTo("fence_transport");
    }
    
}