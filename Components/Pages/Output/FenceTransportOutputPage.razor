@page "/fence_transport_output"
@using Plaszczakowo.Problems.FenceTransport.Input
@using Plaszczakowo.Problems.FenceTransport.Output
@using Plaszczakowo.States

@inherits ProblemOutputBase<FenceTransportOutput>

@inject NavigationManager Navigation
@inject IProblemState ProblemState

<ReturnButton ButtonPosition="HangingButton.HangingButtonPosition.Left"/>
<SaveButton ButtonPosition="HangingButton.HangingButtonPosition.Right" ProblemName="carrier_assignment">Zapisz dane wejściowe</SaveButton>
<div class="fence_transport">
    @if (_outputData != null)
    {
        <WoodenTitle>Czas budowy płotu</WoodenTitle>
        @if (_outputData.HoursToBuild < 0)
        {
            <WoodenTitle>Nie da sie zbudować płotu!</WoodenTitle>
        }
        else
        {
            <div class="clock_wrapper">
                <div class="clock">
                    @(GetClockText())
                </div>
            </div>
        }
    }


    <div class="next_button">
        <OldButton @onclick="NextProblem">Przejdź Dalej</OldButton>
    </div>
</div>

@code {
    FenceTransportOutput? _outputData;

    protected override void OnInitialized()
    {
        _outputData = ProblemState.GetProblemOutputData<FenceTransportOutput>();
        var inputData = ProblemState.GetProblemInputData<FenceTransportInputData>();
        ProblemState.SetProblemInputData(inputData);
    }

    private string GetClockText()
    {
        var output = $"{_outputData?.HoursToBuild ?? 0}:00";
        if (_outputData?.HoursToBuild < 10)
            output = "0" + output;
        return output;
    }

    private void NextProblem()
        => Navigation.NavigateTo("/input/graphcreator/guard_schedule");

    private void ReturnBack()
        => Navigation.NavigateTo("/");

}