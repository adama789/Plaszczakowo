@page "/fence_transport_output"
@using Problem.FenceTransport
@using ProjektZaliczeniowy_AiSD2.States
@using ProblemResolver
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits ProblemOutputBase<FenceTransportOutput>

@inject NavigationManager Navigation
@inject IProblemState ProblemState

<div class="fence_transport">
    @if (_outputData != null)
    {
        @if (_outputData.HoursToBuild < 0)
        {
            <WoodenTitle>Nie da sie zbudować płotu!</WoodenTitle>
        }
        else{
            @if (_outputData.HoursToBuild == 1)
            {
                <WoodenTitle>Można zbudować płot w @(_outputData.HoursToBuild) godzinę</WoodenTitle>
            }
            else if (_outputData.HoursToBuild % 10 > 1 && _outputData.HoursToBuild % 10 < 5)
            {
                <WoodenTitle>Można zbudować płot w @(_outputData.HoursToBuild) godziny</WoodenTitle>
            }
            else
            {
                <WoodenTitle>Można zbudować płot w @(_outputData.HoursToBuild) godzin</WoodenTitle>
            }
        }
    }

    
    <div class="next_button">
        <OldButton @onclick="NextProblem">Przejdź Dalej</OldButton>
    </div>
    <div class="return_button">
        <OldButton @onclick="ReturnBack">Zakończ</OldButton>
    </div>
</div>

@code {
    FenceTransportOutput? _outputData;

    protected override async Task OnInitializedAsync()
    {
        _outputData = await ProblemState.GetProblemOutputData<FenceTransportOutput>();
        var inputData = await ProblemState.GetProblemInputData<FenceTransportInputData>();
        ProblemState.SetProblemInputData(inputData);
    }
    private void NextProblem()
    {
        Navigation.NavigateTo("/input/graphcreator/guard_schedule");
    }
    private void ReturnBack() => Navigation.NavigateTo("/");
}