@page "/fence_transport_output"
@using Problem.FenceTransport
@using States
@using ProblemResolver
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inherits ProblemOutputBase<FenceTransportOutput>

@inject NavigationManager Navigation
@inject IProblemState ProblemState

@if (_outputData != null)
{
    @if (_outputData.HoursToBuild < 0)
    {
        <h2>Nie da sie zbudować płotu!</h2>
        <OldButton @onclick="ReturnBack">Zakończ</OldButton>
    }
    else{
        <h2>Można zbudować płot w @(_outputData.HoursToBuild) godzin</h2>
        <button @onclick="NextProblem">Następny problem</button>
        <OldButton @onclick="ReturnBack">Zakończ</OldButton>
    }
}

@code {
    FenceTransportOutput? _outputData;

    protected override async Task OnInitializedAsync()
    {
        _outputData = await ProblemState.GetProblemOutputData<FenceTransportOutput>();
        var inputData = await ProblemState.GetProblemInputData<FenceTransportInputData>();
        ProblemState.SetProblemInputData(inputData);
    }
    private void NextProblem()
    {
        Navigation.NavigateTo("guard_schedule");
    }
    private void ReturnBack() => Navigation.NavigateTo("/");
}