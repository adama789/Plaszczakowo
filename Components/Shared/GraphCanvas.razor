@using Drawer.GraphDrawer
@inject IJSRuntime JsRuntime;
@rendermode InteractiveServer

<div class="canvas_wrapper">
    <BECanvas Width="CanvasWidth ?? 1280" Height="CanvasHeight ?? 720" @ref="_canvasReference"/>
</div>

@code {

    [Parameter] public required GraphData Data { get; set; }

    [Parameter] public int? CanvasWidth { get; set; }

    [Parameter] public int? CanvasHeight { get; set; }

    [Parameter] public bool EnableZoom { get; set; } = true;

    private BECanvasComponent? _canvasReference;

    private Canvas2DContext? _context;

    private GraphDrawer? _drawer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (EnableZoom)
                await EnableCanvasZoom();

            _context = await _canvasReference.CreateCanvas2DAsync();
            _drawer = new GraphDrawer(_context, Data);

            await _drawer!.Draw();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task EnableCanvasZoom()
    {
        await JsRuntime.InvokeAsync<Task>("enableCanvasZoom", null);
    }

    public async void ChangeGraphData(GraphData newGraphData)
    {
        _drawer!.UpdateGraphData(newGraphData);
        await _drawer!.Draw();
    }

}